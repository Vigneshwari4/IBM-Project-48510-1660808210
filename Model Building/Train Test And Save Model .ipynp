{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    },
    "gpuClass": "standard"
  },
  "cells": [
    {
      "cell_type": "code",
      "source": [
        "#extract zip file\n",
        "\n",
        "!unzip '/content/dataset.zip'"
      ],
      "metadata": {
        "id": "6mjPfrNHWogh"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "7_CsxokHf_OW"
      },
      "outputs": [],
      "source": [
        "#importing image data generator library"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from tensorflow.keras.preprocessing.image import ImageDataGenerator"
      ],
      "metadata": {
        "id": "JdykdCBFgN2J"
      },
      "execution_count": 21,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Image Data Augmentation"
      ],
      "metadata": {
        "id": "XivRHpgxi8IL"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#Configuring image Data Generator Class\n",
        "\n",
        "#Setting Parameter for Image Augmentation for training data\n",
        "\n",
        "train_datagen = ImageDataGenerator(rescale = 1./255, shear_range = 0.2, zoom_range = 0.2, horizontal_flip = True)\n",
        "\n",
        "#Image Data Augmentation for testing data\n",
        "\n",
        "test_datagen = ImageDataGenerator(rescale = 1./255)"
      ],
      "metadata": {
        "id": "KaGWzURyjDtx"
      },
      "execution_count": 22,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Apply ImageDataGenerator Functionality To Trainset And Testset\n"
      ],
      "metadata": {
        "id": "-2RvJqUSa0fJ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#Performing data augmentation to train data\n",
        "\n",
        "x_train = train_datagen.flow_from_directory('/content/dataset/train_set', target_size = (64,64), batch_size = 5, color_mode = 'rgb', class_mode = 'categorical')\n",
        "\n",
        "#performing data augmentation to test data\n",
        "\n",
        "x_test = test_datagen.flow_from_directory('/content/dataset/test_set', target_size = (64,64), batch_size = 5, color_mode = 'rgb', class_mode = 'categorical')\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "WC6KDeZ_a3ni",
        "outputId": "1e805dba-1737-41fd-ba7a-084f663d6c02"
      },
      "execution_count": 23,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Found 742 images belonging to 4 classes.\n",
            "Found 198 images belonging to 4 classes.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#importing neccessary libraries\n",
        "\n",
        "import numpy as np\n",
        "import tensorflow\n",
        "from tensorflow.keras.models import Sequential\n",
        "from tensorflow.keras.layers import Dense,Conv2D,MaxPooling2D,Flatten"
      ],
      "metadata": {
        "id": "-lfbyoXhfKKZ"
      },
      "execution_count": 25,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# initialising the model and adding CNN layers\n",
        "\n",
        "model = Sequential()\n",
        "\n",
        "# First convolution layer and pooling\n",
        "model.add(Conv2D(32,(3,3),input_shape=(64,64,3),activation='relu'))\n",
        "model.add(MaxPooling2D(pool_size=(2,2)))\n",
        "\n",
        "#Second convolution layer and pooling\n",
        "model.add(Conv2D(32,(3,3),activation='relu'))\n",
        "model.add(MaxPooling2D(pool_size=(2,2)))\n",
        "\n",
        "#Flattening the layers\n",
        "model.add(Flatten())\n",
        "\n",
        "#Adding Dense Layers\n",
        "model.add(Dense(units=128,activation='relu'))\n",
        "model.add(Dense(units=4,activation='softmax'))"
      ],
      "metadata": {
        "id": "h5gckgoMf3He"
      },
      "execution_count": 26,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Summary of our model\n",
        "\n",
        "model.summary()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "W6XhkOmfhKg5",
        "outputId": "24ca85d2-c847-49f9-ebed-ed0088c88b47"
      },
      "execution_count": 27,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model: \"sequential\"\n",
            "_________________________________________________________________\n",
            " Layer (type)                Output Shape              Param #   \n",
            "=================================================================\n",
            " conv2d (Conv2D)             (None, 62, 62, 32)        896       \n",
            "                                                                 \n",
            " max_pooling2d (MaxPooling2D  (None, 31, 31, 32)       0         \n",
            " )                                                               \n",
            "                                                                 \n",
            " conv2d_1 (Conv2D)           (None, 29, 29, 32)        9248      \n",
            "                                                                 \n",
            " max_pooling2d_1 (MaxPooling  (None, 14, 14, 32)       0         \n",
            " 2D)                                                             \n",
            "                                                                 \n",
            " flatten (Flatten)           (None, 6272)              0         \n",
            "                                                                 \n",
            " dense (Dense)               (None, 128)               802944    \n",
            "                                                                 \n",
            " dense_1 (Dense)             (None, 4)                 516       \n",
            "                                                                 \n",
            "=================================================================\n",
            "Total params: 813,604\n",
            "Trainable params: 813,604\n",
            "Non-trainable params: 0\n",
            "_________________________________________________________________\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Compiling the model\n",
        "\n",
        "model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])"
      ],
      "metadata": {
        "id": "MTBmxDyihoyp"
      },
      "execution_count": 28,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Fitting the model\n",
        "\n",
        "model.fit_generator(generator=x_train,steps_per_epoch=len(x_train),epochs=20,validation_data=x_test,validation_steps=len(x_test))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "h4zGjUjIiI3C",
        "outputId": "ce5d2a76-3245-4e23-b587-6b4d2fe1bd55"
      },
      "execution_count": 29,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:3: UserWarning: `Model.fit_generator` is deprecated and will be removed in a future version. Please use `Model.fit`, which supports generators.\n",
            "  This is separate from the ipykernel package so we can avoid doing imports until\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/20\n",
            "149/149 [==============================] - 42s 272ms/step - loss: 1.1632 - accuracy: 0.5216 - val_loss: 0.9812 - val_accuracy: 0.5354\n",
            "Epoch 2/20\n",
            "149/149 [==============================] - 38s 252ms/step - loss: 0.8483 - accuracy: 0.6712 - val_loss: 0.7859 - val_accuracy: 0.7374\n",
            "Epoch 3/20\n",
            "149/149 [==============================] - 39s 263ms/step - loss: 0.6883 - accuracy: 0.7278 - val_loss: 0.8899 - val_accuracy: 0.6970\n",
            "Epoch 4/20\n",
            "149/149 [==============================] - 41s 279ms/step - loss: 0.6571 - accuracy: 0.7170 - val_loss: 1.0388 - val_accuracy: 0.6111\n",
            "Epoch 5/20\n",
            "149/149 [==============================] - 38s 253ms/step - loss: 0.5828 - accuracy: 0.7655 - val_loss: 0.7886 - val_accuracy: 0.7525\n",
            "Epoch 6/20\n",
            "149/149 [==============================] - 39s 265ms/step - loss: 0.5124 - accuracy: 0.8113 - val_loss: 0.9449 - val_accuracy: 0.6616\n",
            "Epoch 7/20\n",
            "149/149 [==============================] - 38s 252ms/step - loss: 0.4475 - accuracy: 0.8208 - val_loss: 0.9295 - val_accuracy: 0.7626\n",
            "Epoch 8/20\n",
            "149/149 [==============================] - 37s 253ms/step - loss: 0.5198 - accuracy: 0.8208 - val_loss: 1.0729 - val_accuracy: 0.7172\n",
            "Epoch 9/20\n",
            "149/149 [==============================] - 39s 261ms/step - loss: 0.4103 - accuracy: 0.8423 - val_loss: 1.0310 - val_accuracy: 0.6768\n",
            "Epoch 10/20\n",
            "149/149 [==============================] - 42s 280ms/step - loss: 0.4223 - accuracy: 0.8491 - val_loss: 0.7108 - val_accuracy: 0.7929\n",
            "Epoch 11/20\n",
            "149/149 [==============================] - 38s 254ms/step - loss: 0.4170 - accuracy: 0.8544 - val_loss: 0.8419 - val_accuracy: 0.7121\n",
            "Epoch 12/20\n",
            "149/149 [==============================] - 40s 268ms/step - loss: 0.3207 - accuracy: 0.8841 - val_loss: 0.7221 - val_accuracy: 0.8030\n",
            "Epoch 13/20\n",
            "149/149 [==============================] - 38s 249ms/step - loss: 0.3373 - accuracy: 0.8585 - val_loss: 0.9803 - val_accuracy: 0.7525\n",
            "Epoch 14/20\n",
            "149/149 [==============================] - 43s 287ms/step - loss: 0.3147 - accuracy: 0.8922 - val_loss: 1.3861 - val_accuracy: 0.6667\n",
            "Epoch 15/20\n",
            "149/149 [==============================] - 40s 267ms/step - loss: 0.2967 - accuracy: 0.8841 - val_loss: 1.0562 - val_accuracy: 0.7626\n",
            "Epoch 16/20\n",
            "149/149 [==============================] - 39s 261ms/step - loss: 0.2683 - accuracy: 0.9003 - val_loss: 0.9182 - val_accuracy: 0.8182\n",
            "Epoch 17/20\n",
            "149/149 [==============================] - 40s 272ms/step - loss: 0.2650 - accuracy: 0.8976 - val_loss: 1.0180 - val_accuracy: 0.7677\n",
            "Epoch 18/20\n",
            "149/149 [==============================] - 39s 264ms/step - loss: 0.2661 - accuracy: 0.9164 - val_loss: 0.8409 - val_accuracy: 0.7929\n",
            "Epoch 19/20\n",
            "149/149 [==============================] - 38s 256ms/step - loss: 0.2089 - accuracy: 0.9313 - val_loss: 1.0649 - val_accuracy: 0.7677\n",
            "Epoch 20/20\n",
            "149/149 [==============================] - 37s 251ms/step - loss: 0.2323 - accuracy: 0.9111 - val_loss: 0.9940 - val_accuracy: 0.7879\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<keras.callbacks.History at 0x7fd4455e9710>"
            ]
          },
          "metadata": {},
          "execution_count": 29
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Save the model\n",
        "\n",
        "model.save('disaster.h5')\n",
        "model_json = model.to_json()\n",
        "with open(\"model-bw.json\", \"w\") as json_file:\n",
        "  json_file.write(model_json)"
      ],
      "metadata": {
        "id": "Kiv84YommTTw"
      },
      "execution_count": 34,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Load the saved model\n",
        "\n",
        "from tensorflow.keras.models import load_model\n",
        "from tensorflow.keras.preprocessing import image\n",
        "model = load_model('disaster.h5')"
      ],
      "metadata": {
        "id": "Q06A_1lsnLO7"
      },
      "execution_count": 35,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "x_train.class_indices"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "dfimyhycrMF4",
        "outputId": "7b2f24e9-73b5-4837-8afe-acaef172e998"
      },
      "execution_count": 46,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{'Cyclone': 0, 'Earthquake': 1, 'Flood': 2, 'Wildfire': 3}"
            ]
          },
          "metadata": {},
          "execution_count": 46
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# taking image as input\n",
        "\n",
        "img = image.load_img('/content/dataset/test_set/Flood/1003.jpg',target_size=(64,64))\n",
        "x=image.img_to_array(img)\n",
        "x=np.expand_dims(x,axis=0)\n",
        "index=['Cyclone','Earthquake','Flood','Wildfire']\n",
        "y=np.argmax(model.predict(x),axis=1)\n",
        "print(index[int(y)])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "JM3lFRoloG1G",
        "outputId": "5c66400d-0fd8-4fe1-d541-5c18da6b9b8b"
      },
      "execution_count": 56,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1/1 [==============================] - 0s 22ms/step\n",
            "Flood\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# input 2\n",
        "\n",
        "img = image.load_img('/content/dataset/test_set/Wildfire/1065.jpg',target_size=(64,64))\n",
        "x=image.img_to_array(img)\n",
        "x=np.expand_dims(x,axis=0)\n",
        "index=['Cyclone','Earthquake','Flood','Wildfire']\n",
        "y=np.argmax(model.predict(x),axis=1)\n",
        "print(index[int(y)])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "2X6FLRYssJjo",
        "outputId": "11fac733-3d2c-424d-84af-376418873769"
      },
      "execution_count": 59,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1/1 [==============================] - 0s 27ms/step\n",
            "Wildfire\n"
          ]
        }
      ]
    }
  ]
}
